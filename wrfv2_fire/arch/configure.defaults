
###########################################################
#ARCH    (WALNUT) PC Linux x86_64 (IA64 and Opteron), PGI compiler 5.2 or higher  (Single-threaded, no nesting) (optimized)
#        Note that for 5.1.x comment out -Mpia=fast
#
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
SCC		=	$(CC)
SFC             =       $(FC)
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
PROMOTION	=	-r$(RWORDSIZE) -i4
CFLAGS          =       -DLANDREAD_STUB
FCOPTIM		=	-O2 -fastsse #-Mipa=fast
FCDEBUG		=	#-g -C 
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       $(COREDEFS) -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG -DGRIB1 CONFIGURE_GRIB2_FLAG \
			-DLIMIT_ARGS -DLANDREAD_STUB
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc -I../chem
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf :
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share :
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib2 :
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" FIXED="-Mfixed" archive)

wrfio_int :
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90

###########################################################
#ARCH    (WALNUT) PC Linux x86_64 (IA64 and Opteron), PGI compiler 5.2 or higher  (Single-threaded, no nesting) (debug)
#        Note that for 5.1.x comment out -Mpia=fast
#
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
SCC		=	$(CC)
SFC             =       $(FC)
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
PROMOTION	=	-r$(RWORDSIZE) -i4
CFLAGS          =       -DLANDREAD_STUB
FCOPTIM		=	#-fastsse #-Mipa=fast
FCDEBUG		=	-g -C 
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG)
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       $(COREDEFS) -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG -DGRIB1 CONFIGURE_GRIB2_FLAG \
			-DLIMIT_ARGS -DLANDREAD_STUB
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc -I../chem
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf :
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share :
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib2 :
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" FIXED="-Mfixed" archive)

wrfio_int :
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90

###########################################################
#ARCH (WF) AMD x86_64 Intel xeon i686 ia32 Xeon Linux, ifort compiler (single-threaded, no nesting) debug
#
OMP             =
OMPCPP          =
FC		=	ifort -g  -debug extended -debug-parameters all -traceback -fpe0
CC              =       gcc
SCC		=	$(CC)
SFC		=	$(FC)
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
RSIZEBITS	=	`expr $(RWORDSIZE) \* 8`
PROMOTION	=	-real_size $(RSIZEBITS)
FCDEBUG         =       
FCBASEOPTS      =       -w -FR -cm -I. -Vaxlib -convert big_endian -mp
FCOPTIM		=	-O0
FCFLAGS		=	$(FCOPTIM) $(FCBASEOPTS) $(OMP)
CFLAGS		=       -w
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc -I../chem
ARCHFLAGS       =       $(COREDEFS)  -DLIMIT_ARGS -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DGRIB1 CONFIGURE_GRIB2_FLAG
LD		=	$(FC)
LDFLAGS		=	$(FCFLAGS) $(OMP) CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp -traditional
POUND_DEF	=	$(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM \
                        -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(ENVCOMPDEFS) $(POUND_DEF)
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =	CONFIGURE_NETCDF_LIB_PATH ../frame/module_internal_header_util.o ../frame/pack_utils.o \
                        -L../external/esmf_time_f90 -lesmf_time \
			-L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share
AR              =       ar ru
M4              =       m4 -B14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -FR -I. -w" )

wrfio_grib_share : 
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" \
	  FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib2 : 
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" FIXED="-fixed" archive)

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCFLAGS) -w" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
start_domain.o : start_domain.F
wrf_bdyin.o : wrf_bdyin.F
wrf_bdyout.o : wrf_bdyout.F
wrf_histin.o : wrf_histin.F
wrf_histout.o : wrf_histout.F
wrf_inputin.o : wrf_inputin.F
wrf_inputout.o : wrf_inputout.F
wrf_restartin.o : wrf_restartin.F
wrf_restartout.o : wrf_restartout.F

wrf_bdyin.o wrf_bdyout.o  \
wrf_histin.o wrf_histout.o  \
wrf_inputin.o wrf_inputout.o  \
wrf_restartin.o wrf_restartout.o  \
solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o  start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -O0 $*.f90

module_dm.o : module_dm.F
module_configure.o : module_configure.F

module_configure.o \
module_dm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -g -O0 $*.f90



###########################################################
#ARCH (WF) AMD x86_64 Intel xeon i686 ia32 Xeon Linux, ifort compiler (single-threaded, no nesting) -O2
#
OMP             =
OMPCPP          =
FC		=	ifort
CC              =       gcc
SCC		=	$(CC)
SFC		=	$(FC)
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
RSIZEBITS	=	`expr $(RWORDSIZE) \* 8`
PROMOTION	=	-real_size $(RSIZEBITS)
FCDEBUG         =       # -g
FCBASEOPTS      =       -w -FR -cm -I. -Vaxlib -convert big_endian -fp-model precise -switch fe_use_rtl_copy_arg_inout -mP2OPT_vec_xform_level=103
FCOPTIM		=	-O3 -unroll0 -xP -fno-alias -ip
FCFLAGS		=	$(FCOPTIM) $(FCBASEOPTS) $(OMP)
CFLAGS		=       -w
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc -I../chem
ARCHFLAGS       =       $(COREDEFS)  -DLIMIT_ARGS -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) \
                        -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG -DGRIB1 CONFIGURE_GRIB2_FLAG
LD		=	$(FC)
LDFLAGS		=	$(FCFLAGS) $(OMP) CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP		=	/lib/cpp -traditional
POUND_DEF	=	$(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM \
                        -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS	=	-I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(ENVCOMPDEFS) $(POUND_DEF)
PERL            =       CONFIGURE_PERL_PATH
REGISTRY        =       Registry
LIB             =	CONFIGURE_NETCDF_LIB_PATH ../frame/module_internal_header_util.o ../frame/pack_utils.o \
                        -L../external/esmf_time_f90 -lesmf_time \
			-L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share
AR              =       ar ru
M4              =       m4 -B14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -FR -I. -w" )

wrfio_grib_share : 
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" \
	  FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib2 : 
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" FIXED="-fixed" archive)

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCFLAGS) -w" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
start_domain.o : start_domain.F
wrf_bdyin.o : wrf_bdyin.F
wrf_bdyout.o : wrf_bdyout.F
wrf_histin.o : wrf_histin.F
wrf_histout.o : wrf_histout.F
wrf_inputin.o : wrf_inputin.F
wrf_inputout.o : wrf_inputout.F
wrf_restartin.o : wrf_restartin.F
wrf_restartout.o : wrf_restartout.F

wrf_bdyin.o wrf_bdyout.o  \
wrf_histin.o wrf_histout.o  \
wrf_inputin.o wrf_inputout.o  \
wrf_restartin.o wrf_restartout.o  \
solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_initialize_real.o module_dm.o  start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -O0 $*.f90



module_dm.o : module_dm.F
module_configure.o : module_configure.F

module_configure.o \
module_dm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -g -O0 $*.f90

###########################################################
#ARCH (WF) AMD x86_64 Intel xeon i686 ia32 Xeon Linux, ifort compiler  (single threaded, allows nesting using RSL without MPI) -O2
#
# Note: if you use ifort 8.0, please remove option -xW (for vectorization). This option 
#       has been identified to produce wrong results occationally.
# Notes: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#        for experimental implementation of vortex tracking nests, add -DMOVE_NESTS -DVORTEX_CENTER to ARCHFLAGS
#
OMP             =
OMPCPP          =
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       ifort
LD              =       ifort
CC              =       gcc
SCC		=	$(CC)
SFC             =       ifort
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
RSIZEBITS	=	`expr $(RWORDSIZE) \* 8`
PROMOTION	=	-real_size $(RSIZEBITS)
FCOPTIM		=	-O3 -unroll0 -xP -fno-alias -ip
FCDEBUG		=	#-g
FCBASEOPTS      =       -FR -cm -w -I. $(FCDEBUG) -convert big_endian -fp-model precise -switch fe_use_rtl_copy_arg_inout -mP2OPT_vec_xform_level=103
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       $(COREDEFS) -DGRIB1 CONFIGURE_GRIB2_FLAG -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
			-DLIMIT_ARGS -DSTUBMPI -DLIMIT_ARGS
CFLAGS          =       -w -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL $(ARCHFLAGS)
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc -I../chem
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
			-L../external/io_int -lwrfio_int \
			-L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
			-L../external/io_grib_share -lio_grib_share \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCOPTIM) $(OMP) -convert big_endian CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS $(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) -DGRIB1 CONFIGURE_GRIB2_FLAG
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       gcc

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share : 
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" \
	  FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" \
	  CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)
wrfio_grib2 : 
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" \
	  CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" FIXED="-fixed" archive)

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC) $(PROMOTION)" CFLAGS="-DSTUBS $(CFLAGS)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
#solve_em.o : solve_em.F
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F

solve_interface.o                                    \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_initialize_real.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90

solve_em.o: solve_em.F
solve_em.o: 
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -O $*.f90

module_dm.o : module_dm.F
module_configure.o : module_configure.F

module_configure.o \
module_dm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -g -O0 $*.f90

###########################################################
#ARCH (WF) AMD x86_64 Intel xeon i686 ia32 Xeon Linux, ifort compiler (OpenMP)
#
# Note: if you use ifort 8.0, please remove option -xW (for vectorization). This option 
#       has been identified to produce wrong results occationally.
#
OMP             =       -openmp -fpp -auto
OMPCPP          =       -D_OPENMP
FC              =       ifort
LD              =       ifort
CC              =       gcc
SCC		=	$(CC)
SFC             =       $(FC)
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
RSIZEBITS	=	`expr $(RWORDSIZE) \* 8`
PROMOTION	=	-real_size $(RSIZEBITS)
CFLAGS          =
FCOPTIM		=       -O3 -unroll0 -xP -fno-alias -ip  #-O2 -no-ipo # -xW
FCDEBUG		=	#-g
FCBASEOPTS      =       -FR -cm -w -I. $(FCDEBUG) -convert big_endian -fp-model precise -switch fe_use_rtl_copy_arg_inout -mP2OPT_vec_xform_level=103
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       $(COREDEFS) -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG -DGRIB1 CONFIGURE_GRIB2_FLAG \
			-DLIMIT_ARGS 
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -I ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../inc -I../chem
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
			-L../external/io_grib_share -lio_grib_share \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	$(FCFLAGS) $(FCFLAGS) $(OMP) CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -traditional
POUND_DEF	=	$(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) -DGRIB1 CONFIGURE_GRIB2_FLAG
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share : 
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" \
	  FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib2 : 
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" FIXED="-fixed" archive)

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
#solve_em.o : solve_em.F
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_initialize_real.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90

module_dm.o : module_dm.F
module_configure.o : module_configure.F

module_configure.o \
module_dm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -g -O0 $*.f90

###########################################################
#ARCH (WF) AMD x86_64 Intel xeon i686 ia32 Xeon Linux, ifort compiler SM-Parallel (OpenMP, allows nesting using RSL without MPI)
#
# Note: if you use ifort 8.0, please remove option -xW (for vectorization). This option 
#       has been identified to produce wrong results occationally.
# Notes: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#        for experimental implementation of vortex tracking nests, add -DMOVE_NESTS -DVORTEX_CENTER to ARCHFLAGS
#
#
OMP             =       -openmp -fpp -auto
OMPCPP          =       -D_OPENMP
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       ifort
LD              =       ifort
CC              =       gcc
SCC		=	$(CC)
SFC             =       ifort
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
RSIZEBITS	=	`expr $(RWORDSIZE) \* 8`
PROMOTION	=	-real_size $(RSIZEBITS)
FCOPTIM		=       -O3 -unroll0 -xP -fno-alias -ip
FCDEBUG		=	#-g
FCBASEOPTS      =       -FR -cm -w -I. $(FCDEBUG) -convert big_endian -fp-model precise -switch fe_use_rtl_copy_arg_inout -mP2OPT_vec_xform_level=103
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       $(COREDEFS) -DGRIB1 CONFIGURE_GRIB2_FLAG -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
			-DLIMIT_ARGS -DSTUBMPI 
CFLAGS          =       -w -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL $(ARCHFLAGS)
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc -I../chem
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
			-L../external/io_int -lwrfio_int -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
			-L../external/io_grib_share -lio_grib_share \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time $(OMP)
LDFLAGS         =       $(FCOPTIM) -convert big_endian CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS $(OMPCPP) $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) -DGRIB1 CONFIGURE_GRIB2_FLAG
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       gcc

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share : 
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" \
	  FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib2 : 
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" FIXED="-fixed" archive)

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; \
          make CC="$(CC)" FC="$(FC) $(PROMOTION)" CFLAGS="-DSTUBS $(CFLAGS)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
#solve_em.o : solve_em.F
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F

solve_interface.o                                   \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_initialize_real.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90

module_dm.o : module_dm.F
module_configure.o : module_configure.F

module_configure.o \
module_dm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -g -O0 $*.f90

###########################################################
#ARCH (WF) AMD x86_64 Intel xeon i686 ia32 Xeon Linux, ifort+gcc compiler  DM-Parallel (RSL, MPICH, allows nesting) -O2
#
# Note: if you use ifort 8.0, please remove option -xW (for vectorization). This option 
#       has been identified to produce wrong results occationally.
# Notes: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#        for experimental implementation of vortex tracking nests, add -DMOVE_NESTS -DVORTEX_CENTER to ARCHFLAGS
#
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90 -f90=ifort
LD              =       mpif90 -f90=ifort
CC              =       mpicc -cc=gcc
SCC		=	gcc
SFC             =       ifort
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
RSIZEBITS	=	`expr $(RWORDSIZE) \* 8`
PROMOTION	=	-real_size $(RSIZEBITS)
FCOPTIM		=	-O3 -unroll0 -xP -fno-alias -ip
FCDEBUG		=	#-g
FCBASEOPTS      =       -FR -cm -w -I. $(FCDEBUG) -convert big_endian -fp-model precise -switch fe_use_rtl_copy_arg_inout -mP2OPT_vec_xform_level=103
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       $(COREDEFS) -DGRIB1 CONFIGURE_GRIB2_FLAG -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
                        -DMPI  \
			-DLIMIT_ARGS 
CFLAGS          =       -w -DDM_PARALLEL -DWRF_RSL_IO $(ARCHFLAGS) \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc -I../chem
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
			-L../external/io_int -lwrfio_int \
			-L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time
LDFLAGS         =       $(FCOPTIM) -convert big_endian CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS) -DGRIB1 CONFIGURE_GRIB2_FLAG
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       gcc

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share : 
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" \
	  FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib1 : 
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" archive)

wrfio_grib2 : 
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCFLAGS) -w" FIXED="-fixed" archive)

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" CFLAGS="$(CFLAGS)" FC="$(FC) $(PROMOTION)" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST linux )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_initialize_real.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90

module_dm.o : module_dm.F
module_configure.o : module_configure.F

module_configure.o \
module_dm.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) -g -O0 $*.f90

###########################################################
#ARCH    Darwin Intel, g95 compiler  (Single-threaded, no nesting, debug)
#
FC              =       g95 -g
LD              =       g95 -g
CC              =       gcc -g
SCC             =       $(CC)
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
SFC             =       $(FC)
# g95 does not like -r4. if you want promotion to -r8 add it to PROMOTION below
#PROMOTION      =       -r$(RWORDSIZE) -i4
PROMOTION       =       -i4
CFLAGS          =       -w -DF2CSTYLE -DMACOS
FCOPTIM         =       -O0 # -fast
FCDEBUG         =       -g -O0
FCBASEOPTS      =       -Wno=101,139,155,158 -fendian=big -ffree-form -ffree-line-length-huge $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       $(COREDEFS) -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG -DGRIB1 CONFIGURE_GRIB2_FLAG \
                        -DLIMIT_ARGS -DG95 -DMACOS
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -fmod=../main -I../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share \
                        ../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time
LDFLAGS         =       $(FCFLAGS) CONFIGURE_LDFLAGS
ENVCOMPDEFS     =       CONFIGURE_COMPILEFLAGS
CPP             =       cpp -C -P -traditional
POUND_DEF       =       $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH      =       CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

#### Override default sed command and script for Fortran source files         ####
#### This sed script does not pass __FILE__ and __LINE__ to wrf_error_fatal() ####
#### because the Fortran compiler complains about long source lines.          ####
SED_FTN = sed -f ../arch/no_file_line.sed

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf :
	( cd ../external/io_netcdf ; \
          make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share :
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive )

wrfio_grib2 :
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" FIXED="-ffixed-form" archive)

wrfio_int :
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time :
	( cd ../external/esmf_time_f90 ; \
          make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
mediation_integrate.o \
module_configure.o                                             \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90

###########################################################
#ARCH   (WALNUT) PC Linux x86_64, PGI compiler  SM-Parallel (OpenMP, no nesting)
#
OMP             =       -mp=nonuma
OMPCPP          =       -D_OPENMP
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
SCC		=	$(CC)
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
SFC             =       $(FC)
PROMOTION	=	-r$(RWORDSIZE) -i4
CFLAGS          =
FCOPTIM		=	-O2 # -fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       $(COREDEFS) -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 \
                         CONFIGURE_NETCDF_FLAG -DGRIB1 CONFIGURE_GRIB2_FLAG \
			-DLIMIT_ARGS
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../frame -I../share -I../phys -I../chem -I../inc
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH \
                        -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =	$(FCFLAGS) $(OMP) CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	$(OMPCPP) -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       $(CC)

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 wrfio_int module_dm.F esmf_time

module_dm.F :
	( /bin/cp module_dm_warning module_dm.F ; cat module_dm_stubs.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share :
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive )

wrfio_grib2 :
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" FIXED="-Mfixed" archive )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" \
          TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 10 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 30 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 300 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi

###########################################################
#ARCH    (WALNUT) PC Linux x86_64, PGI compiler  SM-Parallel (OpenMP, allows nesting using RSL without MPI)
#
# Notes: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#        for experimental implementation of vortex tracking nests, add -DMOVE_NESTS -DVORTEX_CENTER to ARCHFLAGS
#
OMP             =       -mp=nonuma
OMPCPP          =       -D_OPENMP
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       pgf90
LD              =       pgf90
CC              =       gcc
SCC		=	$(CC)
SFC             =       pgf90
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
FCOPTIM		=	-O2 # -fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS) $(OMP)
ARCHFLAGS       =       $(COREDEFS) -DGRIB1 CONFIGURE_GRIB2_FLAG -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
			-DLIMIT_ARGS -DSTUBMPI
PROMOTION	=	-r$(RWORDSIZE) -i4
CFLAGS          =       -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL $(ARCHFLAGS)
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../inc -I../chem
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       $(FCFLAGS) $(OMP) CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  $(OMPCPP) -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

wrfio_grib_share :
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive )

wrfio_grib2 :
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" FIXED="-Mfixed" archive )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" CFLAGS='-DSTUBS' FC="$(FC) $(PROMOTION)" FFLAGS='-byteswapio' MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST stub )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 10 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 30 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 300 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi

###########################################################
#ARCH    (WALNUT) PC Linux x86_64, PGI compiler  DM-Parallel (RSL, MPICH, Allows nesting)
#
# Notes: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#        for experimental implementation of vortex tracking nests, add -DMOVE_NESTS -DVORTEX_CENTER to ARCHFLAGS
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90 -f90=pgf90
LD              =       mpif90 -f90=pgf90
CC              =       mpicc -cc=gcc
SCC		=	gcc
SFC             =       pgf90
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
PROMOTION	=	-r$(RWORDSIZE) -i4
CFLAGS          =       -DDM_PARALLEL -DWRF_RSL_IO \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL/RSL
FCOPTIM		=	-O2 # -fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       $(COREDEFS) -DGRIB1 CONFIGURE_GRIB2_FLAG -DINTIO -DWRF_RSL_IO -DRSL -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
			-DLIMIT_ARGS
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../chem -I../inc
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL/RSL -lrsl \
                        -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       -byteswapio $(FCFLAGS) CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL/RSL -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 ../external/RSL/RSL/librsl.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share :
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib2 :
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" FIXED="-Mfixed" archive)

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL/RSL/librsl.a :
	( cd ../external/RSL/RSL ; make CC="$(CC)" FC="$(FC) $(PROMOTION) -byteswapio" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST linux )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 10 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 30 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 300 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi

###########################################################
#ARCH     (WALNUT) PC Linux x86_64, PGI compiler  DM-Parallel (RSL_LITE, MPICH, Allows nesting)
#
# Notes: for experimental implementation of moving nests, add -DMOVE_NESTS to ARCHFLAGS
#        for experimental implementation of vortex tracking nests, add -DMOVE_NESTS -DVORTEX_CENTER to ARCHFLAGS
#
DMPARALLEL      =       1
MAX_PROC        =       1024
FC              =       mpif90 -f90=pgf90
LD              =       mpif90 -f90=pgf90
CC              =       mpicc -cc=gcc
SCC		=	gcc
SFC             =       pgf90
RWORDSIZE       =       $(NATIVE_RWORDSIZE)
PROMOTION	=	-r$(RWORDSIZE) -i4
CFLAGS          =       -DDM_PARALLEL \
                        -DMAXDOM_MAKE=$(MAX_DOMAINS) -DMAXPROC_MAKE=$(MAX_PROC) -I../external/RSL_LITE
#FCOPTIM		=	-fastsse 
FCOPTIM		=	-O2 # -fast
FCDEBUG		=	#-g
#FCBASEOPTS      =       -w -byteswapio -Ktrap=fp -Mfree $(FCDEBUG)
FCBASEOPTS      =       -w -byteswapio -Mfree $(FCDEBUG) # -Mlfs
#Options for Debian Sarge systems
#FCBASEOPTS      =       -w -byteswapio -Mfree -Mipa=fast,inline,safe  $(FCDEBUG) # -Mlfs
FCFLAGS         =       $(FCOPTIM) $(FCBASEOPTS)
ARCHFLAGS       =       $(COREDEFS) -DGRIB1 CONFIGURE_GRIB2_FLAG -DINTIO -DDM_PARALLEL \
                        -DIWORDSIZE=4 -DDWORDSIZE=8 -DRWORDSIZE=$(RWORDSIZE) -DLWORDSIZE=4 CONFIGURE_NETCDF_FLAG \
			-DLIMIT_ARGS -DNMM_NEST=$(WRF_NMM_NEST)
# machine-specific flags needed to link in ESMF library (C++ run-time-library, etc.)
ESMF_LIB_FLAGS  =       
ESMF_IO_LIB     =       ESMFIOLIB
ESMF_IO_LIB_EXT =       ESMFIOEXTLIB
INCLUDE_MODULES =       -module ../main -I../external/io_netcdf -I../external/io_int -I../external/esmf_time_f90 \
                        -I../external -I../frame -I../share -I../phys -I../chem -I../inc
PERL            =       perl
REGISTRY        =       Registry
LIB             =       CONFIGURE_NETCDF_LIB_PATH -L../external/RSL_LITE -lrsl_lite \
                        -L../external/io_grib1 -lio_grib1 \
                        CONFIGURE_GRIB2_LIB \
                        -L../external/io_grib_share -lio_grib_share \
			-L../external/io_int -lwrfio_int \
			../frame/module_internal_header_util.o ../frame/pack_utils.o -L../external/esmf_time_f90 -lesmf_time 
LDFLAGS         =       -byteswapio $(FCFLAGS) CONFIGURE_LDFLAGS
ENVCOMPDEFS	=	CONFIGURE_COMPILEFLAGS
CPP             =       /lib/cpp -C -P -traditional
POUND_DEF	=	-DNO_RRTM_PHYSICS  -traditional $(COREDEFS) -DNONSTANDARD_SYSTEM -DCONFIG_BUF_LEN=$(CONFIG_BUF_LEN) -DMAX_DOMAINS_F=$(MAX_DOMAINS)
CPPFLAGS        =       -I$(LIBINCLUDE) -C -P $(ARCHFLAGS) -I../external/RSL_LITE -C -P `cat ../inc/dm_comm_cpp_flags` $(ENVCOMPDEFS) $(POUND_DEF)
AR              =       ar ru
M4              =       m4 -B 14000
RANLIB          =       ranlib
NETCDFPATH	=	CONFIGURE_NETCDF_PATH
CC_TOOLS        =       cc

externals : wrf_ioapi_includes CONFIGURE_WRFIO_NF wrfio_grib_share wrfio_grib1 CONFIGURE_WRFIO_GRIB2 ../external/RSL_LITE/librsl_lite.a wrfio_int gen_comms.c module_dm.F esmf_time

gen_comms.c : ../external/RSL_LITE/gen_comms.c
	( /bin/cp ../tools/gen_comms_warning ../tools/gen_comms.c ; \
          cat ../external/RSL_LITE/gen_comms.c >> ../tools/gen_comms.c )

module_dm.F : ../external/RSL_LITE/module_dm.F
	( /bin/cp module_dm_warning module_dm.F ; cat ../external/RSL_LITE/module_dm.F >> module_dm.F )

wrfio_nf : 
	( cd ../external/io_netcdf ; \
	  make NETCDFPATH=CONFIGURE_NETCDF_PATH RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(FC) $(PROMOTION) $(FCFLAGS) -w" TRADFLAG="-traditional" )

wrfio_grib_share :
	( cd ../external/io_grib_share ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib1 :
	( cd ../external/io_grib1 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" archive)

wrfio_grib2 :
	( cd ../external/io_grib2 ; \
          make CC="$(SCC)" CFLAGS="$(CFLAGS) CONFIGURE_GRIB2_INC" RM="$(RM)" RANLIB="$(RANLIB)" CPP="$(CPP)" FC="$(SFC) $(PROMOTION) -I. $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" FIXED="-Mfixed" archive)

wrfio_int : 
	( cd ../external/io_int ; \
          make CC="$(CC)" RANLIB="$(RANLIB)" CPP="$(CPP)" SFC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" FC="$(SFC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS) -w" TRADFLAG="-traditional" all )

esmf_time : 
	( cd ../external/esmf_time_f90 ; \
	  make FC="$(FC) $(PROMOTION) $(FCDEBUG) $(FCBASEOPTS)" RANLIB="$(RANLIB)" CPP="$(CPP) -I../../inc -I. $(POUND_DEF)" )

../external/RSL_LITE/librsl_lite.a :
	( cd ../external/RSL_LITE ; make CC="$(CC)" FC="$(FC) $(FCFLAGS) $(PROMOTION) -byteswapio" MAX_DOMAINS=$(MAX_DOMAINS) MAX_PROC=$(MAX_PROC) LEARN_BCAST=-DLEARN_BCAST )

# compile these without high optimization to speed compile
solve_interface.o : solve_interface.F
shift_domain_em.o : shift_domain_em.F
module_io_mm5.o : module_io_mm5.F
module_si_io.o : module_si_io.F
module_io_wrf.o : module_io_wrf.F
module_domain.o : module_domain.F
module_start.o : module_start.F
module_initialize.o : module_initialize.F
module_initialize_b_wave.o : module_initialize_b_wave.F
module_initialize_hill2d_x.o : module_initialize_hill2d_x.F
module_initialize_quarter_ss.o : module_initialize_quarter_ss.F
module_initialize_squall2d_x.o : module_initialize_squall2d_x.F
module_initialize_squall2d_y.o : module_initialize_squall2d_y.F
module_initialize_real.o : module_initialize_real.F
module_dm.o : module_dm.F
start_domain.o : start_domain.F
mediation_integrate.o : mediation_integrate.F
module_configure.o : module_configure.F

solve_interface.o                                              \
shift_domain_em.o                                              \
module_io_mm5.o module_si_io.o module_io_wrf.o module_domain.o \
module_start.o module_initialize.o module_initialize_b_wave.o  \
module_initialize_hill2d_x.o module_initialize_quarter_ss.o    \
module_initialize_squall2d_x.o module_initialize_squall2d_y.o  \
module_configure.o                                             \
mediation_integrate.o \
module_initialize_real.o module_dm.o start_domain.o :
	$(RM) $@
	$(SED_FTN) $*.F > $*.b 
	$(CPP) -I../inc $(CPPFLAGS) $*.b  > $*.f90
	$(RM) $*.b
	$(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 10 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 30 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi
#PGI	if [ ! -e $@ ] ; then \
#PGI	sleep 300 ; $(FC) -c $(PROMOTION) $(FCBASEOPTS) $(MODULE_DIRS) $*.f90 ; \
#PGI	fi


##################################################################
#ARCH  NULL
